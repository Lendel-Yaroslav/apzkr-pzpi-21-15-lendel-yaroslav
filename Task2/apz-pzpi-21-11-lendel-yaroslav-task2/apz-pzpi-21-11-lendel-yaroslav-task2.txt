1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої системи є один користувач: власник елеватора.
Основними потребами користувача елеватора є:
•	можливість перегляду інформації про наявність та стан зерна в елеваторі;
•	можливість моніторингу та керування процесами завантаження зерна;
•	можливість моніторингу та керування процесами відвантаження зерна;
•	можливість отримання даних про температуру, вологість та інші параметри зберігання зерна в режимі реального часу;
•	можливість перегляду, створення, редагування, видалення доступного обладнання;











2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


Для проєктування бази даних було розроблено ER-модель даних (див. додаток А.2). Вона складається з 7 таблиць: користувач, елеватор, зерновий бункер, зерно, тип зерна, сорт зерна, дані, умови зберігання зерна.	
У базі даних наявні наступні зв’язки між сутностями:
	Елеватори. Елеватор має ім'я і зв'язок один до багатьох з користувачем, оскільки у бункера може бути тільки один власник.
	Кожен елеватор може мати кілька бункерів для зберігання зерна. Тому між елеватором та бункерами для зберігання зерна зв’язок один до багатьох.
	Для визначення умов зберігання зерна використовується модель Conditions, яка має зв'язок один до багатьох з типом зерна (grain_type) і зберігає мінімальні та максимальні значення температури і вологості.
	Кожне зерно представлене моделлю Grain, яке має сорт (sort) і зв'язок один до багатьох з типом зерна.
	Дані про температуру і вологість в кожному бункері зберігаються за допомогою моделі Data, яка має мітку часу та зв'язок один до багатьох з конкретним бункером.


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для розробки серверної частини системи було обрано мову програмування Python та використано технологію Django REST Framework для створення API. У ролі системи управління базами даних було обрано PostgreSQL, до якого з серверного застосунка здійснюється доступ за допомогою Django ORM (Object-Relational Mapping). Django ORM надає зручний інтерфейс для взаємодії з базами даних у вигляді об’єктів сутностей.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).

 
Рисунок 2 – Діаграма розгортання системи 

Для документування та тестування API використовувався Django Rest Framework (DRF): DRF - це аналог OpenAPI (Swagger) у світі Django. Він полегшує створення та документування API, надаючи інструменти для швидкої розробки RESTful API. DRF надає можливість автоматичної генерації документації API, що допомагає підвищити якість та зручність використання API.
Django також підтримує захищений протокол HTTPS для забезпечення безпеки даних під час їх передач.
Для реалізації автентифікації було використано Django Authentication System:  вбудована система автентифікації та авторизації, що надає гнучкий механізм для керування доступом користувачів
Розроблений серверний застосунок складається із трьох шарів: Presentation, Application та Database. Кожен рівень незалежний від іншого, що дозволяє чітко розподілити відповідальність та забезпечити гнучкість у розробці та підтримці.
Причини вибору трирівневої архітектури:
•	Чітке розділення обов'язків. Трирівнева архітектура дозволяє чітко розділити відповідальність між різними частинами системи: рівень представлення (Presentation) відповідає за взаємодію з користувачем, рівень логіки (Application) обробляє бізнес-логіку, а рівень даних (Database) зберігає та керує даними. Це дозволяє легко змінювати або оновлювати кожен шар без впливу на інші.
•	Масштабованість та продуктивність. Трирівнева архітектура забезпечує кращу масштабованість, оскільки кожен шар може бути масштабований незалежно. Наприклад, можна збільшити кількість серверів, що обслуговують лише рівень логіки (Application), не змінюючи рівень представлення або даних.
•	Гнучкість у розробці та підтримці. Оскільки кожен шар має чітко визначені функції, розробники можуть легко впроваджувати нові функції або вносити зміни, не порушуючи роботу інших частин системи. Це знижує час та витрати на розробку та підтримку проекту.
•	Підвищена безпека. Завдяки розділенню на шари, трирівнева архітектура забезпечує вищий рівень безпеки. Наприклад, рівень даних (Database) може бути захищений від прямого доступу, забезпечуючи доступ до даних лише через рівень логіки (Application).
Архітектура серверного застосунку може бути представлена за допомогою діаграми пакетів (див. додаток Б.1). 
У додатку В подано приклади коду серверного застосунку.
4 СПЕЦИФІКАЦІЯ REST


REST API в розробленому проєкті складається з 17 кінцевих точ. Кожна кінцева точка відповідає за надання даних клієнту та виконання бізнес-логіки в межах застосунку.
Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.

Таблиця 1 – Специфікація REST системи «Програмна система для контролю за елеваторами»
Кінцева точка	Метод HTTP	Призначення
/login/	POST	Дозволяє користувачам увійти в систему
/logout/	POST	Дозволяє користувачам вийти в систему
/register/	POST	Реєстрація нового користувача
/api/elevators/	GET	Отримати список елеваторів користувача
/add_elevator/	POST	Створити новий елеватор
/api/elevators/<int:elevator_id>/bunkers/	GET	Отримати список бункерів елеватора
/api/elevators/<int:elevator_id>/	DELETE	Видалення елеваора
Кінцева точка	Метод HTTP	Призначення
/api/elevators/<int:id>/edit/	PUT	Редагування елеватора
/api/elevators/<int:id>/bunkers/	GET	Отримання списку бункерів для елеватора
/api/elevators/<int:elevator_id>/add_bunker/ 
	POST	Додати новий зерновий бункер до елеватора
/api/bunkers/<int:bunker_id>/	DELETE	Видалити зерновий бункер з елеватора
/api/bunkers/<int:bunker_id>/	PUT	Оновлення даних про бункер
/add_grain/	POST	Додавання зерна до бункера
/unload_grain/<int:pk>/	POST	Вивантаження зерна з бункера
/observation_history/<int:tankId>/	GET	Отримання історії спостережень за бункером
/api/grain_types/	GET	Отримання типів зерна
/api/sort_choices/	GET	Отримання виборів сорту зерна

Було складено таблицю з REST-специфікацією основних ендпоінтів для серверного застосунку



ВИСНОВКИ


Під час виконання лабораторної роботи було отримано навички у проектуванні серверної частини програмної системи, розробці сценаріїв використання, створенні діаграм розгортання та пакетів, а також у проектуванні бази даних. Було виконано програмну реалізацію серверної частини програмної системи «Програмна система для контролю за елеваторами» мовою програмування Python з використанням фреймворку Django.


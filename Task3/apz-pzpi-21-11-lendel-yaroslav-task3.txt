1 КОНЦЕПТУАЛЬНЕ МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT-пристрій розробленої системи після після встановлення під’єднується до мережі Wi-Fi. Після цього, за допомогою мобільного додатку або вебсайту можна починати спостерігати за умовами зберігання зерна.
Сам ІоТ пристрій працює в двох потоках:
•	Перший потік відповідає за збирання даних з датчика. У цьому потоці пристрій регулярно отримує дані про температуру та вологість від підключеного датчика. Цей потік забезпечує безперервне оновлення та зберігання поточних показників, що надходять з сенсора;
•	Другий потік відповідає за надсилання зібраних даних на сервер. У цьому потоці пристрій бере останні отримані дані з першого потоку та відправляє їх на сервер через певний проміжок часу або за наявності нових даних.  

2 БУДОВА ПРИСТРОЮ

IoT-пристрій складається з кількох основних компонентів: мікроконтролера, датчика температури та вологості, модуля WiFi та логіки для відправки даних на сервер. У даному випадку використовується мікроконтролер ESP32, датчик DHT22 (див. рис. 2).
При запуску програми відбувається ініціалізація датчика DHT22, а потім починається спроба підключення до WiFi-мережі. ESP32 підключається до мережі Wi-Fi, і як тільки з'єднання встановлено, починається основна робота програми. У безкінечному циклі loop з заданою періодичністю зчитуються дані температури та вологості з датчика DHT22. Ці дані потім відправляються на сервер.
Для відправки даних на сервер використовується HTTP-клієнт. Формується URL, що містить значення температури та вологості у вигляді GET параметрів. Після цього здійснюється відправка HTTP POST запиту на сервер за цим URL. 
Кожну ітерацію циклу програма затримується на 5 секунд перед наступним зчитуванням даних з датчика. У результаті пристрій дозволяє періодично вимірювати температуру та вологість навколишнього середовища і відправляти ці дані на сервер для подальшої обробки або зберігання.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

3.1 Опис використаних технологій
Цей проєкт написаний мовою програмування C++, яка широко використовується для розробки програмного забезпечення для мікроконтролерів і вбудованих систем. Мова C++ дозволяє ефективно працювати з апаратним забезпеченням, забезпечуючи низькорівневий доступ до ресурсів мікроконтролера ESP32.
Цей проєкт використовує декілька ключових технологій для збору та відправки даних про температуру і вологість. Мікроконтролер ESP32 є центральним компонентом системи, який відповідає за взаємодію з іншими компонентами та виконання програмного коду. Датчик DHT22 використовується для зчитування даних про температуру і вологість навколишнього середовища, які надалі обробляються мікроконтролером.
Бібліотека DHTesp забезпечує зручний інтерфейс для роботи з датчиком DHT22, дозволяючи легко отримувати значення температури і вологості. Модуль WiFi на базі ESP32 дозволяє пристрою підключатися до бездротової мережі, в даному випадку до віртуальної точки доступу Wokwi-GUEST. Це підключення є необхідним для відправки даних на сервер через Інтернет.
Для відправки даних використовується бібліотека HTTPClient, яка забезпечує функціональність для створення та відправки HTTP-запитів. У програмі формується URL з GET параметрами, що містять значення температури і вологості, після чого здійснюється відправка HTTP POST запиту на сервер. Сервер, на якому працює веб-додаток на основі фреймворку Django, обробляє отримані дані.
Використання цих технологій дозволяє реалізувати систему моніторингу кліматичних умов, яка періодично зчитує дані з датчика, підключається до WiFi мережі та відправляє ці дані на віддалений сервер для подальшої обробки або зберігання.

3.2 Опис результатів розробки частини проекту для вбудованих систем
Результатом роботи став застосунок для вбудованих систем, що може бути запущений на мікроконтролері ESP32. Під час запуску додатку, спершу відбувається його ініціалізація та підготовка. Пристрій підключається до мережі WiFi та здійснює ініціалізацію датчика DHT22 для зчитування температури і вологості.
Після успішного підключення до мережі та ініціалізації датчика, система починає періодично зчитувати дані з датчика з інтервалом у 2 секунди. Ці дані потім формуються у вигляді HTTP-запиту, який відправляється на сервер для подальшої обробки або зберігання. Адреса сервера та параметри запиту визначаються під час конфігурації системи.
Виконання програми здійснюється у безперервному циклі, забезпечуючи постійне оновлення даних та їх відправку на сервер. Це дозволяє створити ефективну систему моніторингу умов зберігання зерна.
Для демонстрації структури проекту була розроблена UML діаграма взаємодії (див. додаток А.1).
Ми створили UML-діаграму пакетів (див. додаток A.2) для ілюстрації того, як використовуються пакети всередині нашої системи. Ця діаграма показує, як різні компоненти програмного забезпечення взаємодіють та встановлюють інтерфейси між собою, що допомагає краще зрозуміти структуру та організацію системи.
На основі описаної діяльності пристрою було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додаток. A.3).

4 ОПИС РЕЗУЛЬТАТІВ ТЕСТУВАННЯ ЧАСТИНИ ПРОЕКТУ ДЛЯ ВБУДОВАНИХ СИСТЕМ

Розроблений пристрій для збору даних про температуру і вологість та їх передачі на сервер був протестований для перевірки його функціональності та стабільності. Тестування проводилося з використанням реального мікроконтролера ESP32, датчика DHT22, а також серверної частини на основі фреймворку Django.
Тестування здійснювалося в кілька етапів:
•	Ініціалізація та підключення до WiFi мережі. Пристрій успішно підключався до віртуальної точки доступу Wokwi-GUEST. Усі спроби підключення, включаючи повторні, завершувалися успіхом, що підтверджує надійність WiFi модуля ESP32.
•	Зчитування даних з датчика DHT22. Дані про температуру і вологість зчитувалися кожні 2 секунди. Результати зчитування були стабільними та відповідали реальним умовам навколишнього середовища.
•	Формування та відправка HTTP-запитів на сервер. Було перевірено, що дані коректно передаються на сервер у вигляді GET параметрів в URL. Сервер успішно приймав запити і повертав відповіді з кодом стану HTTP 200, що свідчить про правильну обробку запитів.
•	Обробка відповідей від сервера. Відповіді сервера відображалися у серійному моніторі, що дозволило переконатися в правильності отриманих даних. У випадках виникнення помилок, повідомлення про них також коректно відображалися, що полегшувало діагностику та налагодження.
•	Циклічне зчитування та відправка даних. Пристрій працював стабільно протягом тривалого часу, здійснюючи безперервне зчитування та передачу даних. Це підтверджує надійність розробленої системи для тривалого моніторингу кліматичних умов.
•	Для перевірки коректності відправки HTTP-запитів використовувався інструмент Postman. З його допомогою імітувалися запити, що відправляються пристроєм, для перевірки відповіді серверної частини. Це дозволило підтвердити, що формат запитів та відповіді сервера відповідають очікуванням.
•	Для проведення тестування використовувалися вбудовані можливості середовища розробки Arduino IDE, серійний монітор для виведення результатів, а також серверна частина на Django для прийому та обробки даних. Результати тестування показали, що розроблена частина проєкту функціонує коректно та відповідає всім поставленим вимогам.






1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої системи є один користувач: власник елеватора.
Основними потребами користувача елеватора є:
•	можливість перегляду інформації про наявність та стан зерна в елеваторі;
•	можливість моніторингу та керування процесами завантаження зерна;
•	можливість моніторингу та керування процесами відвантаження зерна;
•	можливість отримання даних про температуру, вологість та інші параметри зберігання зерна в режимі реального часу;
•	можливість перегляду, створення, редагування, видалення доступного обладнання;


2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для створення клієнтської частини програмної системи було обрано мову програмування JavaScript разом з React для забезпечення швидкої розробки та зручного використання завдяки статичній типізації та компонентному підходу.
CSS застосовувався для стилізації елементів інтерфейсу, що спрощує процес написання стилів.
Material UI був використаний для розробки інтерфейсу, оскільки містить готові та стилізовані компоненти, що дозволяє швидко створювати привабливий веб-інтерфейс.
React-router-dom був обраний для навігації по сайту, надаючи потужні інструменти для створення реактивної навігації.
Axios використовувався для виконання асинхронних запитів, що дозволяє зручно працювати з HTTP-запитами та обробляти відповіді сервера.
Webpack був використаний для розгортання веб-додатку, забезпечуючи ефективний спосіб розгортання та автоматичне оновлення в реальному часі.
Для візуалізації використаних пакетів була розроблена діаграма пакетів.
Клієнтська частина проєкту побудована за компонентною архітектурою, де кожен компонент відповідає за окрему функціональність. Основні компоненти включають сторінки для авторизації, реєстрації, додавання та редагування елеваторів та бункерів, а також перегляд історії та результатів порівняння.

 Компоненти:
Login (Авторизація)
•	Компонент для входу користувачів у систему. Включає форми для введення логіна та пароля. Після успішної авторизації користувач перенаправляється на головну сторінку. 
Register (Реєстрація)
•	Компонент для реєстрації нових користувачів. Містить форми для введення особистої інформації та створення облікового запису. Після успішної реєстрації користувач перенаправляється на сторінку авторизації.
Home (Головна сторінка)
•	Головна сторінка, яка відображає загальну інформацію та надає доступ до основних функцій додатку, таких як додавання елеваторів, зерна, бункерів та ін.
AddElevator (Додавання елеватора)
•	Компонент для додавання нових елеваторів. Містить форми для введення назви елеватора, кількості бункерів та ємності кожного бункера.
EditElevator (Редагування елеватора)
•	Компонент для редагування існуючих елеваторів. Містить форми для оновлення інформації про назву елеватора, кількість бункерів та ємність кожного бункера.
AddGrain (Додавання зерна)
•	Компонент для додавання нових записів про зерно. Містить форми для вибору типу, сорту зерна, а також вибору елеватора та бункера для зберігання.
AddBunker (Додавання бункера)
•	Компонент для додавання нових бункерів до певного елеватора. Містить форми для введення ємності бункера.
EditBunker (Редагування бункера)
•	Компонент для редагування існуючих бункерів. Містить форми для оновлення інформації про ємність, температуру та вологість у бункері.
GrainUnload (Розвантаження зерна)
•	Компонент для управління розвантаженням зерна з бункерів. Містить функціонал для вибору бункера та введення кількості зерна для розвантаження.
ComparisonResults (Результати порівняння)
•	Компонент для перегляду результатів порівняння умов зберігання зерна в різних бункерах. Відображає інформацію про температуру, вологість та повідомлення про стан кожного бункера.
ObservationHistory (Історія спостережень)
•	Компонент для перегляду історії спостережень за умовами зберігання зерна в конкретному бункері. Містить дані про зміни температури, вологості та інших показників. 

Використання програмної системи починається з авторизації – або створення нового акаунту, або входу в уже створений.
Після успішної авторизації користувач перенаправляється на головну сторінку, де відображається загальна інформація та надається доступ до основних функцій додатку, таких як додавання елеваторів, зерна, бункерів та інше. Головна сторінка містить меню для швидкого доступу до всіх основних функцій системи.
На головній сторінці користувач може бачити загальну інформацію про елеватор, включаючи наявність та стан зерна, температуру, вологість та інші параметри зберігання. Звідси він може перейти до відповідних компонентів для управління елеваторами, бункерами та зерном.
Для додавання нового елеватора користувач переходить до компонента AddElevator, де заповнює форму з назвою елеватора, кількістю бункерів та ємністю кожного бункера. Аналогічно, для редагування існуючих елеваторів використовується компонент EditElevator, де можна оновити відповідну інформацію.
Для додавання зерна використовується компонент AddGrain, де користувач обирає тип та сорт зерна, а також елеватор та бункер для зберігання. Якщо необхідно додати новий бункер до певного елеватора, користувач використовує компонент AddBunker, вводячи ємність бункера. Для редагування бункерів існує компонент EditBunker, де можна змінити інформацію про ємність, температуру та вологість у бункері.

Керування процесом розвантаження зерна з бункерів здійснюється через компонент GrainUnload. Користувач обирає бункер та вводить кількість зерна для розвантаження.
Для перегляду історії спостережень за умовами зберігання зерна в конкретному бункері використовується компонент ObservationHistory, який містить дані про зміни температури, вологості та інших показників.
Користувач також має можливість переглядати результати порівняння умов зберігання зерна в різних бункерах за допомогою компонента ComparisonResults. Тут відображається інформація про температуру, вологість та повідомлення про стан кожного бункера.
Загалом, система забезпечує власнику елеватора можливість ефективного управління процесами завантаження та розвантаження зерна, моніторингу умов зберігання в режимі реального часу, а також перегляду, створення, редагування та видалення доступного обладнання.
Для кращого уявлення про взаємодію користувачів з клієнтською частиною системи було розроблено діаграму взаємодії (див. додаток А.3).
У додатку Б наведено приклади коду клієнтської частини системи. 


ВИСНОВКИ


Під час виконання практичного завдання було набуття досвіду у проєктуванні клієнтської частини програмної системи. Результатом роботи стала програмна реалізація фронтенду, розроблена за допомогою React. Під час розробки були дотримані принципи чистого коду мови програмування JavaScript.
